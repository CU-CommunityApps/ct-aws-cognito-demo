---
AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Create Cognito User Pool using Azure ADFS/OIDC as Identity Provider and connect
  the User Pool for authentication for an ALB.
Parameters:
Parameters:

  AzureAppRegistrationClientIDParam:
    Description: Application (Client) ID of the Azure App Registration?
    Type: String

  AzureAppRegistrationClientSecretParam:
    Description: Client secret from the Azure App Registration?
    Type: String
    NoEcho: True
    
  ServiceFQDNParam:
    Description: Fully qualified domain name that you will point to the ALB (e.g., demo.cs.cucloud.net )
    Type: String
    
  PublicSubnetsParam:
    Description: List of public subnets on which to deploy the ALB
    Type: List<AWS::EC2::Subnet::Id>
    
  VPCParam:
    Description: VPC in which to deploy the ALB
    Type: AWS::EC2::VPC::Id
    
  ACMCertificateParam:
    Description: ARN of ACM certificate for ServiceFQDNParam
    Type: String
  
  KeyNameParam:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair

  InstanceTypeParam:
    Description: Application Server EC2 instance type
    Type: String
    Default: t3.nano
    AllowedValues:
      - t2.nano
      - t2.micro
      - t3.nano
      - t3.micro
    ConstraintDescription: must be a valid EC2 instance type

  SSHLocation:
    Description: The IP address range (CIDR block) that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
Metadata: {}
Conditions: {}
Mappings: {}

Resources:

  DemoUserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      AccountRecoverySetting: 
          RecoveryMechanisms: 
          - Name: admin_only
            Priority: 1
      # AdminCreateUserConfig: 
      #   AdminCreateUserConfig
      # AliasAttributes: 
      #  - email
      #  - preferred_username
      # AutoVerifiedAttributes: 
      #   - String
      # DeviceConfiguration: 
      #   DeviceConfiguration
      # EmailConfiguration: 
      #   EmailConfiguration
      # EmailVerificationMessage: String
      # EmailVerificationSubject: String
      # EnabledMfas: 
      #   - String
      # LambdaConfig: 
      #   LambdaConfig
      # MfaConfiguration: String
      # Policies: 
      #   Policies
      Schema:
        - Name: onprem_sid
          AttributeDataType: String
          Mutable: true
          Required: false
          StringAttributeConstraints:
            MaxLength: 256
            MinLength: 1          
      # SmsAuthenticationMessage: String
      # SmsConfiguration: 
      #   SmsConfiguration
      # SmsVerificationMessage: String
      UsernameAttributes: 
        - email
      UsernameConfiguration: 
          CaseSensitive: true
      # UserPoolAddOns: 
      #   UserPoolAddOns
      UserPoolName: demo-azure-oidc-user-pool
      # UserPoolTags: Json
      # VerificationMessageTemplate: 
      #   VerificationMessageTemplate

  DemoUserPoolDomain:
    Type: 'AWS::Cognito::UserPoolDomain'
    Properties:
      Domain: !Sub "demo-azure-oidc-${VPCParam}"
      UserPoolId: !Ref DemoUserPool
  
  DemoAzureIdP:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties: 
      AttributeMapping:
        username: sub
        preferred_username: upn
        email: email
        "custom:onprem_sid": onprem_sid
      # IdpIdentifiers: 
      #   - String
      ProviderDetails: 
        client_id: !Ref AzureAppRegistrationClientIDParam
        client_secret: !Ref AzureAppRegistrationClientSecretParam
        attributes_request_method: GET
        oidc_issuer: https://login.microsoftonline.com/5d7e4366-1b9b-45cf-8e79-b14b27df46e1/v2.0
        authorize_scopes: openid email profile User.ReadBasic.All
        # authorize_url if not available from discovery URL specified by oidc_issuer key
        # token_url if not available from discovery URL specified by oidc_issuer key
        # attributes_url if not available from discovery URL specified by oidc_issuer key
        # jwks_uri if not available from discovery URL specified by oidc_issuer key
      ProviderName: demo-azure-oidc-idp
      ProviderType: OIDC
      UserPoolId: !Ref DemoUserPool

  DemoUserPoolAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      AllowedOAuthFlows: 
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        # - aws.cognito.signin.user.admin
      # AnalyticsConfiguration: 
      #   AnalyticsConfiguration
      CallbackURLs: 
        - !Join [ "", [ "https://", !Ref ServiceFQDNParam, "/oauth2/idpresponse" ]]
      ClientName: demo-azure-oidc-app-client
      DefaultRedirectURI: !Join [ "", [ "https://", !Ref ServiceFQDNParam, "/oauth2/idpresponse" ]]
      # ExplicitAuthFlows: 
      #   - String
      GenerateSecret: true
      # LogoutURLs: 
      #   - String
      PreventUserExistenceErrors: ENABLED
      # ReadAttributes: 
      #   - String
      # RefreshTokenValidity: Integer
      SupportedIdentityProviders: 
        - !Ref DemoAzureIdP
      UserPoolId: !Ref DemoUserPool
      # WriteAttributes: 
      #   - String

  DemoALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      # LoadBalancerAttributes: 
      #   LoadBalancerAttribute
      Name: demo-azure-oidc-alb
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref DemoALBSecurityGroup
      # SubnetMappings: 
      #   - SubnetMapping
      Subnets: !Ref PublicSubnetsParam
      # Tags: 
      #   - Tag
      Type: application

  DemoALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security Group for demo-azure-oidc ALB
      GroupName: demo-azure-oidc-alb
      SecurityGroupEgress: 
        - CidrIp: 0.0.0.0/0
          # CidrIpv6: String
          Description: Allow all egress
          # DestinationPrefixListId: String
          # DestinationSecurityGroupId: String
          # FromPort: Integer
          IpProtocol: -1
          # ToPort: Integer
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          # CidrIpv6: String
          Description: Allow inbound HTTPS
          FromPort: 443
          IpProtocol: tcp
          # SourcePrefixListId: String
          # SourceSecurityGroupId: String
          # SourceSecurityGroupName: String
          # SourceSecurityGroupOwnerId: String
          ToPort: 443
      # Tags: 
      #   - Tag
      VpcId: !Ref VPCParam

  DemoALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Certificates: 
        - CertificateArn: !Ref ACMCertificateParam
      DefaultActions: 
        -  
          AuthenticateCognitoConfig: 
              # AuthenticationRequestExtraParams: 
              #   Key : Value
              # OnUnauthenticatedRequest: String
              Scope: openid email profile
              # SessionCookieName: String
              # SessionTimeout: Long
              UserPoolArn: !GetAtt DemoUserPool.Arn
              UserPoolClientId: !Ref DemoUserPoolAppClient
              UserPoolDomain: !Ref DemoUserPoolDomain
          Order: 1
          Type: authenticate-cognito
        -  
          Order: 50000
          TargetGroupArn: !Ref DemoALBTargetGroup
          Type: forward
      LoadBalancerArn: !Ref DemoALB
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06

  DemoALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      # HealthCheckEnabled: Boolean
      # HealthCheckIntervalSeconds: Integer
      # HealthCheckPath: String
      # HealthCheckPort: String
      # HealthCheckProtocol: String
      # HealthCheckTimeoutSeconds: Integer
      HealthyThresholdCount: 2
      # Matcher: 
      #   Matcher
      Name: demo-azure-oidc-target-group
      Port: 80
      Protocol: HTTP
      # Tags: 
      #   - Tag
      TargetGroupAttributes: 
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      Targets: 
        - Id: !Ref EC2Instance
      TargetType: instance
      # UnhealthyThresholdCount: Integer
      VpcId: !Ref VPCParam

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceTypeParam
      KeyName: !Ref KeyNameParam
      ImageId: ami-0fc61db8544a617ed
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          SubnetId: !Select [ 0, !Ref PublicSubnetsParam ]
          DeviceIndex: 0
          GroupSet: 
            - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: demo-azure-oidc-instance
      UserData: 
        !Base64 |
          #!/bin/bash -xe

          yum update -y
          yum update -y aws-cfn-bootstrap
          yum install -y docker git
          systemctl --now enable docker.service
          git clone https://github.com/CU-CommunityApps/ct-aws-cognito-demo-docker.git /tmp/ct-aws-cognito-demo-docker
          docker build -t ct-aws-cognito-demo-docker /tmp/ct-aws-cognito-demo-docker
          docker run --detach --restart always -p 80:5000 ct-aws-cognito-demo-docker:latest


  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow SSH, HTTP to demo-azure-oidc EC2 instance
      VpcId: !Ref VPCParam
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
          
Outputs:
  ALBDNSName:
    Description: DNS name of the ALB
    Value: !GetAtt DemoALB.DNSName
